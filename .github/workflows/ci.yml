name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Smoke tests with containerized environment
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build smoke test image
      run: |
        docker build --target test -f docker/Dockerfile -t regulator-smoke-test .
        
    - name: Run smoke tests
      run: |
        # Create minimal .env file for testing
        echo "OPENAI_API_KEY=test_key" > .env
        
        # Run smoke tests in container
        docker run --rm \
          -v $(pwd)/tests:/app/tests \
          --env-file .env \
          regulator-smoke-test \
          python -m pytest tests/smoke/ -v --tb=short

  # Container health check
  container-health:
    name: Container Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build production image
      run: |
        docker build --target production -f docker/Dockerfile -t regulator-prod .
        
    - name: Test container startup
      run: |
        # Create minimal .env file
        echo "OPENAI_API_KEY=test_key" > .env
        
        # Start container in background
        docker run -d \
          --name regulator-test \
          -p 5000:5000 \
          --env-file .env \
          regulator-prod
          
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        docker ps | grep regulator-test
        
        # Test Flask health endpoint (if available)
        curl -f http://localhost:5000/ || echo "Health endpoint not available"
        
        # Clean up
        docker stop regulator-test
        docker rm regulator-test

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run Black formatter check
      run: black --check .
      
    - name: Run Ruff linter
      run: ruff check .
      
    - name: Run MyPy type checker
      run: mypy src/
      
    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files

  # Build and push Docker images (on main branch)
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [smoke-tests, container-health, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: development
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max